<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>文章列表 on 宁飞的个人博客</title>
    <link>https://dinofei.github.io/myblog/posts/</link>
    <description>Recent content in 文章列表 on 宁飞的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 19 Mar 2023 19:03:42 +0800</lastBuildDate><atom:link href="https://dinofei.github.io/myblog/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>一次批量修改更新mongo实践经历</title>
      <link>https://dinofei.github.io/myblog/posts/20230322001/</link>
      <pubDate>Wed, 22 Mar 2023 00:25:43 +0800</pubDate>
      
      <guid>https://dinofei.github.io/myblog/posts/20230322001/</guid>
      <description>使用mongo的aggregate的方法，利用pipeline来对数据进行批量的整合改造，最后更新聚合。
直接上代码：
// 统计ratings中每个电影的评分平均值和打分人数 // 关联movies并更新到rating和user_count的字段中 // 为了顺带测试一下$inc的功能，对rating使用自增而不是set db.ratings.aggregate([ { $group: { _id: &amp;#34;$movieId&amp;#34;, user_count: {$sum: 1}, avg_rating: {$avg: &amp;#34;$rating&amp;#34;}, } }, { $addFields: { &amp;#34;avg_rating&amp;#34;: {$toInt: &amp;#34;$avg_rating&amp;#34;} } }, { $out: &amp;#34;tmp_ratings&amp;#34; } ]) db.movies.aggregate([ { $lookup: { from: &amp;#34;tmp_ratings&amp;#34;, localField: &amp;#34;movieId&amp;#34;, foreignField: &amp;#34;_id&amp;#34;, as: &amp;#34;result&amp;#34; } }, { $unwind: &amp;#34;$result&amp;#34; }, { $project: { _id: 1, &amp;#34;ext.rating2&amp;#34;: { $add: [{$ifNull: [&amp;#34;$ext.rating2&amp;#34;, 0]}, &amp;#34;$result.avg_rating&amp;#34;] }, &amp;#34;ext.user_count&amp;#34;: &amp;#34;$result.user_count&amp;#34;, &amp;#34;ext.rating&amp;#34;: &amp;#34;$ext.rating&amp;#34;,// 保留原字段rating不被丢弃 } }, { $merge: { into: &amp;#34;movies&amp;#34;, on: &amp;#34;_id&amp;#34;, whenMatched: &amp;#34;merge&amp;#34;, whenNotMatched: &amp;#34;discard&amp;#34;, } }, ]) db.</description>
    </item>
    
    <item>
      <title>我是如何使用Hugo快速生成一个静态博客网站，并通过GitHub pages发布的？</title>
      <link>https://dinofei.github.io/myblog/posts/20230319001/</link>
      <pubDate>Sun, 19 Mar 2023 19:03:42 +0800</pubDate>
      
      <guid>https://dinofei.github.io/myblog/posts/20230319001/</guid>
      <description>安装Hugo，brew install hugo
快速生成一个网站目录， hugo new
修改根目录下的配置文件，
baseURL = &amp;#39;&amp;#39; #网站根域名 builddrafts = true #允许编译草稿文件 theme = &amp;#34;hyde&amp;#34; #使用的主题，需要将该主题clone到theme中，git clone https://github.com/spf13/hyde.git [[menu.main]] name = &amp;#39;文章&amp;#39; url = &amp;#39;/post/article_list&amp;#39; [[menu.main]] name = &amp;#39;介绍&amp;#39; url = &amp;#39;/post/home&amp;#39; #定义自己的菜单目录 接下来就可以生成内容页面，编写自己的博客了。
$ hugo new post/home.md &amp;hellip;
然后就可以在本地预览页面了,
hugo server --disableFastRender ,页面内容会实时编译。当然为了方便，可以将该命令写到makefile中。
编写完之后需要生成静态html页面，目录默认为public目录, 执行
$ hugo ，然后将public目录的内容上传到GitHub的repo中，在其setting中开启pages功能就OK了。pages的地址为 https://(your username)/github.io/(your repo name)/
注意配置文件中的 baseurl 也要替换为pages的根域名。
小技巧：
在Hugo中如何写类似&amp;lt;a&amp;gt;标签的跳转链接，使用md的[]()语法，然后使用 ref 包裹要跳转的文件，比如 []({{ &amp;lt; ref &amp;quot;/path/file.md&amp;quot; &amp;gt; }})，需要注意的是 ref两边的 &amp;lt; &amp;gt;中间有空格。 https://www.</description>
    </item>
    
  </channel>
</rss>
